@model List<HospitalManagement.ClientApp.Models.Bed>
@{
    ViewData["Title"] = "Bed List";
    var patientMap = ViewBag.PatientMap as Dictionary<int, string>;

    // Extract distinct wards from the model for the Ward filter dropdown
    var wards = Model.Select(b => b.RoomType).Distinct().OrderBy(w => w).ToList();
}

<h2 class="mb-4 fw-bold" align="center" style="color:#c06788;">🛏️ Bed List</h2>

<div class="mb-4 d-flex justify-content-between align-items-center flex-wrap gap-3">
    <div class="d-flex gap-2 align-items-center flex-wrap">
        <label for="statusFilter" class="fw-semibold mb-0">Filter by Status:</label>
        <select id="statusFilter" class="form-select form-select-sm" style="width: 150px;">
            <option value="all" selected>All</option>
            <option value="available">Available</option>
            <option value="occupied">Occupied</option>
        </select>

        <label for="wardFilter" class="fw-semibold mb-0 ms-3">Filter by Room:</label>
        <select id="wardFilter" class="form-select form-select-sm" style="width: 150px;">
            <option value="all" selected>All</option>
            @foreach (var ward in wards)
            {
                <option value="@ward">@ward</option>
            }
        </select>

        <label for="bedNumberFilter" class="fw-semibold mb-0 ms-3">Search Bed #:</label>
        <input id="bedNumberFilter" type="text" class="form-control form-control-sm" placeholder="Enter bed number" style="width: 200px;" />
    </div>

    <div class="d-flex gap-3 flex-wrap">
        @if (User.IsInRole("Admin"))
        {
            <a class="btn btn-create d-flex align-items-center" asp-action="Create">Create Bed</a>
        }
        <a class="btn btn-assign d-flex align-items-center" asp-action="Assign">Assign Bed to Patient</a>
    </div>
</div>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>@TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row row-cols-1 row-cols-md-3 g-4" id="bedList">
    @foreach (var bed in Model)
    {
        var bedStatusClass = bed.isOccupied ? "occupied" : "available";
        <div class="col bed-card @bedStatusClass" data-bednumber="@bed.BedNumber.ToString()" data-ward="@bed.RoomType">
            <div class="card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span class="fw-bold fs-5">Bed #@bed.BedNumber</span>
                    @if (bed.isOccupied)
                    {
                        <span class="badge bg-danger d-flex align-items-center">
                            <i class="bi bi-x-circle-fill me-1"></i> Occupied
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-success d-flex align-items-center">
                            <i class="bi bi-check-circle-fill me-1"></i> Available
                        </span>
                    }
                </div>
                <div class="card-body">
                    <p class="mb-1"><strong>Room:</strong> @bed.RoomType</p>
                    <p class="mb-3">
                        <strong>Patient:</strong>
                        @if (bed.PatientId != null && patientMap.ContainsKey((int)bed.PatientId))
                        {
                            <span>@patientMap[(int)bed.PatientId]</span>
                        }
                        else
                        {
                            <span class="text-muted fst-italic">No patient assigned</span>
                        }
                    </p>

                    <div class="d-flex flex-wrap gap-2">
                        <a asp-action="Details" asp-route-id="@bed.Id" class="btn btn-sm btn-outline-info flex-grow-1" title="Details">
                            <i class="bi bi-eye-fill me-1"></i>Details
                        </a>
                        @if (User.IsInRole("Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@bed.Id" class="btn btn-sm btn-outline-warning flex-grow-1" title="Edit">
                                <i class="bi bi-pencil-fill me-1"></i>Edit
                            </a>
                        }
                        @if(User.IsInRole("Admin"))
                        {
                            <a asp-action="Delete" asp-route-id="@bed.Id" class="btn btn-sm btn-outline-danger flex-grow-1"
                               title="Delete" onclick="return confirm('Are you sure you want to delete this bed?');">
                                <i class="bi bi-trash-fill me-1"></i>Delete
                            </a>
                        }

                        @if (bed.isOccupied && bed.PatientId != null)
                        {
                            <form asp-action="Release" method="post" class="flex-grow-1" onsubmit="return confirm('Release bed from patient?');">
                                <input type="hidden" name="patientId" value="@bed.PatientId" />
                                <button type="submit" class="btn btn-sm btn-outline-secondary w-100" title="Release Bed">
                                    <i class="bi bi-door-open-fill me-1"></i>Release
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .btn-create {
        background-color: #c06788;
        color: white;
    }

        .btn-create:hover {
            background-color: #a64c72;
            color: white;
        }

    .btn-assign {
        background-color: #5c6bc0;
        color: white;
    }

        .btn-assign:hover {
            background-color: #3f51b5;
            color: white;
        }
</style>

<script>
    // Auto-hide alerts
    window.setTimeout(() => {
        const alerts = document.querySelectorAll('.alert-dismissible');
        alerts.forEach(alert => {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        });
    }, 3500);

    // Filters
    const statusFilter = document.getElementById('statusFilter');
    const wardFilter = document.getElementById('wardFilter');
    const bedNumberFilter = document.getElementById('bedNumberFilter');
    const bedCards = document.querySelectorAll('.bed-card');

    function filterBeds() {
        const statusValue = statusFilter.value;
        const wardValue = wardFilter.value.toLowerCase();
        const bedNumberValue = bedNumberFilter.value.trim().toLowerCase();

        bedCards.forEach(card => {
            const isOccupied = card.classList.contains('occupied');
            const bedNumber = card.getAttribute('data-bednumber').toLowerCase();
            const ward = card.getAttribute('data-ward').toLowerCase();

            // Filter by status
            const statusMatch =
                statusValue === 'all' ||
                (statusValue === 'occupied' && isOccupied) ||
                (statusValue === 'available' && !isOccupied);

            // Filter by ward
            const wardMatch = wardValue === 'all' || ward === wardValue;

            // Filter by bed number (partial match)
            const bedNumberMatch = bedNumber.includes(bedNumberValue);

            // Show card only if all filters match
            if (statusMatch && wardMatch && bedNumberMatch) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    statusFilter.addEventListener('change', filterBeds);
    wardFilter.addEventListener('change', filterBeds);
    bedNumberFilter.addEventListener('input', filterBeds);
</script>
